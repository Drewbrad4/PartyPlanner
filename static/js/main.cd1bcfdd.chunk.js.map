{"version":3,"sources":["Components/Header.js","Components/Cart.js","Components/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","htmlFor","type","min","id","onChange","this","props","handleGuests","handleBudget","Component","Cart","cart","map","item","index","key","price","finalPrices","reduce","accumulator","currentValue","budgetStatus","ItemList","partyItems","onClick","addItem","App","currentItem","state","budget","setState","e","guests","target","value","preventDefault","console","log","numOfGuests","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd1bcfdd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Header extends Component{\n\n    render(){  \n      return (\n        <div className=\"inputz\">\n          <div className=\"header\">\n            <h1 className=\"headerTitle\" >Party Hearty</h1>\n            </div>\n          <div>\n            <label className=\"guests\" htmlFor=\"numberOfGuests\">Number of Guests:</label>\n            <input className=\"one\" type=\"number\" min=\"0\" id=\"numOfGuests\" onChange={this.props.handleGuests}/>\n            <br/>\n            <label className=\"budge\" htmlFor=\"budget\">Budget: $</label>\n            <input className=\"two\" type=\"number\" min=\"0\" id=\"budget\" onChange={this.props.handleBudget}/>\n          </div>\n        </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class Cart extends Component{\n\n    render(){  \n        return (\n        <div className=\"totalBottomBox\">\n                <div className=\"cartBorder\">\n                <h2 className=\"cartName\" >Cart:</h2>\n                <ul>\n                    {this.props.cart.map((item, index) => {\n                        return(\n                        <li className=\"cartItems\" key={index}>{item.item} ${item.price} {/* <label>QTY:</label><input type=\"number\" defaultValue={this.props.guests}/>*/}</li> \n                        )\n                    })}\n                    </ul>\n            </div>\n            <div className=\"everythingButCart\">\n                <div className=\"totalBorder\"> \n                    <h2 className=\"totalName\" >Total:</h2>\n                    <div className=\"totalTotal\" >\n                        $ {this.props.finalPrices.reduce((accumulator, currentValue) => accumulator + currentValue)}\n                    </div>\n                </div>\n                    \n                <div className=\"stayInBudge\">\n                    {this.props.budgetStatus}\n                </div>\n            </div>    \n        </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class ItemList extends Component{\n\n    render(){ \n      return (\n          \n          <div className=\"itemList\">\n            <ul>\n            {this.props.partyItems.map((item, index) => {\n                return(\n                    <li className=\"actualItems\" key={index}>{item.item} ${item.price} \n                    <button className=\"addItem\" onClick={ () => {this.props.addItem(item, index)}}>Add Item</button></li>\n                )\n            })}\n            </ul>\n          </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport Cart from './Components/Cart'\nimport ItemList from './Components/ItemList'\n\nexport default class App extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      partyItems:\n        [{ item: \"Napkins:\", price: 3.00 },\n          { item: \"Plates:\", price: 10.00 },\n          { item: \"Cups:\", price: 5.00 },\n          { item: \"Cutlery:\", price: 7.00 },\n          { item: \"Table Cloths:\", price: 13.00 },\n          { item: \"Balloons:\", price: 10.00 },\n          { item: \"Banners:\", price: 16.00 },\n          { item: \"Yard Signs:\", price: 22.00 }, \n          { item: \"Candles:\", price: 4.00 },\n          { item: \"Beer:\", price: 22.00 },\n          { item: \"Hard Liquor:\", price: 30.00 }, \n          { item: \"Hard Seltzer:\", price: 12.00 },\n          { item: \"Board Games:\", price: 20.00 }, \n          { item: \"Video Games:\", price: 25.00 },\n          { item: \"Card Games:\", price: 15.00 },\n          { item: \"Yard Games:\", price: 22.00 },\n          { item: \"Chips:\", price: 6.00 },\n          { item: \"Dip:\", price: 15.00 },\n          { item: \"Veggies:\", price: 15.00 },\n          { item: \"Meat Plate:\", price: 23.00 },\n          { item: \"Pizza:\", price: 16.00 }],\n      cart: [],\n      finalPrices: [0],\n      guests: \"\",\n      budget: 0,\n      budgetStatus: <p className=\"underBudge\">UNDERBUDGET</p>\n    }\n  }\n   // Add Item method. Updates cart with items added and adds the item price to the finalPrices arr.\n  addItem = (currentItem) => {\n    const {cart, finalPrices, budget} = this.state\n    this.setState({ cart: [...cart, currentItem]})\n    this.setState({ finalPrices: [...finalPrices, currentItem.price]})\n    if(finalPrices.reduce((accumulator, currentValue) => accumulator + currentValue) > budget){\n      this.setState({ budgetStatus: <p className=\"overBudge\">OVERBUDGET</p>})\n    }\n  }\n\n  // Sets the state of guests to be the user entered input. \n  handleGuests = (e) => {\n    const {guests} = this.state\n    this.setState({ guests: e.target.value})\n    e.preventDefault()\n  }\n\n  handleBudget = (e) => {\n    const {budget} = this.state\n    this.setState({ budget: e.target.value})\n    e.preventDefault()\n    console.log(budget);\n  }\n\n  \n  render(){  \n    return (\n      <>\n        <Header \n          handleGuests={this.handleGuests}\n          handleBudget={this.handleBudget}\n          numOfGuests={this.state.guests}\n        />\n\n        <div className=\"pictureSpace\">\n          <img src=\"./images/tomuch.png\" className=\"manTwo\"/>\n          <img src=\"./images/tomuch.png\" className=\"manOne\"/>\n        </div>\n\n        <ItemList \n          partyItems={this.state.partyItems}\n          addItem={this.addItem}\n        />\n\n        <div className=\"pictureSpace\">\n          <img src=\"./images/poppers.png\" className=\"poppersTwo\"/>\n          <img src=\"./images/poppers.png\" className=\"poppersOne\"/>\n        </div>\n\n        <Cart \n          cart={this.state.cart}\n          finalPrices={this.state.finalPrices}\n          guests={this.state.guests}\n          budget={this.state.budget}\n          budgetStatus={this.state.budgetStatus}\n        />\n\n        <div>\n          <img src=\"./images/bottles.png\" className=\"bottlesTwo\"/>\n          <img src=\"./images/bottles.png\" className=\"bottlesOne\"/>\n        </div>\n\n        <div className=\"pictureSpace\">\n          <img src=\"./images/birthday.png\" className=\"birthday\" />\n        </div>\n      <div>\n        <h2 className=\"closing\">WE DON'T PARTY TILL YOU DO!</h2>\n      </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}